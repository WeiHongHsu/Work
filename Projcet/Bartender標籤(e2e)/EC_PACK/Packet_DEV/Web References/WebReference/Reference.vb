'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="videocallsSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class videocalls
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendCommandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AGVSendCmdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ECSendCmdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Packet_DEV.My.MySettings.Default.Package_DEV_WebReference_videocalls
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendCommandCompleted As SendCommandCompletedEventHandler
        
        '''<remarks/>
        Public Event AGVSendCmdCompleted As AGVSendCmdCompletedEventHandler
        
        '''<remarks/>
        Public Event ECSendCmdCompleted As ECSendCmdCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendCommand", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendCommand(ByVal CommStr As String, ByVal ColorType As Integer) As String
            Dim results() As Object = Me.Invoke("SendCommand", New Object() {CommStr, ColorType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendCommandAsync(ByVal CommStr As String, ByVal ColorType As Integer)
            Me.SendCommandAsync(CommStr, ColorType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendCommandAsync(ByVal CommStr As String, ByVal ColorType As Integer, ByVal userState As Object)
            If (Me.SendCommandOperationCompleted Is Nothing) Then
                Me.SendCommandOperationCompleted = AddressOf Me.OnSendCommandOperationCompleted
            End If
            Me.InvokeAsync("SendCommand", New Object() {CommStr, ColorType}, Me.SendCommandOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendCommandOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCommandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCommandCompleted(Me, New SendCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AGVSendCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AGVSendCmd(ByVal positionId As String, ByVal wayBillNo As String, ByVal ColorType As Integer) As String
            Dim results() As Object = Me.Invoke("AGVSendCmd", New Object() {positionId, wayBillNo, ColorType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AGVSendCmdAsync(ByVal positionId As String, ByVal wayBillNo As String, ByVal ColorType As Integer)
            Me.AGVSendCmdAsync(positionId, wayBillNo, ColorType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AGVSendCmdAsync(ByVal positionId As String, ByVal wayBillNo As String, ByVal ColorType As Integer, ByVal userState As Object)
            If (Me.AGVSendCmdOperationCompleted Is Nothing) Then
                Me.AGVSendCmdOperationCompleted = AddressOf Me.OnAGVSendCmdOperationCompleted
            End If
            Me.InvokeAsync("AGVSendCmd", New Object() {positionId, wayBillNo, ColorType}, Me.AGVSendCmdOperationCompleted, userState)
        End Sub
        
        Private Sub OnAGVSendCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.AGVSendCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AGVSendCmdCompleted(Me, New AGVSendCmdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ECSendCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ECSendCmd(ByVal CommStr As String, ByVal ColorType As Integer) As String
            Dim results() As Object = Me.Invoke("ECSendCmd", New Object() {CommStr, ColorType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ECSendCmdAsync(ByVal CommStr As String, ByVal ColorType As Integer)
            Me.ECSendCmdAsync(CommStr, ColorType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ECSendCmdAsync(ByVal CommStr As String, ByVal ColorType As Integer, ByVal userState As Object)
            If (Me.ECSendCmdOperationCompleted Is Nothing) Then
                Me.ECSendCmdOperationCompleted = AddressOf Me.OnECSendCmdOperationCompleted
            End If
            Me.InvokeAsync("ECSendCmd", New Object() {CommStr, ColorType}, Me.ECSendCmdOperationCompleted, userState)
        End Sub
        
        Private Sub OnECSendCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.ECSendCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ECSendCmdCompleted(Me, New ECSendCmdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub SendCommandCompletedEventHandler(ByVal sender As Object, ByVal e As SendCommandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCommandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub AGVSendCmdCompletedEventHandler(ByVal sender As Object, ByVal e As AGVSendCmdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AGVSendCmdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub ECSendCmdCompletedEventHandler(ByVal sender As Object, ByVal e As ECSendCmdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ECSendCmdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
